name: Infrastructure Deployment

on:
  push:
    paths:
      - 'movoz-infra/**'
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.6.0'

jobs:
  validate:
    name: Validate Terraform Configuration
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: |
          cd movoz-infra
          terraform fmt -check -recursive

      - name: Terraform Init
        run: |
          cd movoz-infra
          terraform init

      - name: Terraform Validate
        run: |
          cd movoz-infra
          terraform validate

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'movoz-infra/'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    strategy:
      matrix:
        environment: [dev, prod]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Deploy ${{ matrix.environment }} environment
        run: |
          cd movoz-infra
          
          # Set environment variables
          export TF_VAR_environment=${{ matrix.environment }}
          export TF_VAR_aws_region=us-west-2
          export TF_VAR_db_password="${{ secrets.DB_PASSWORD }}"
          
          # Initialize Terraform
          terraform init
          
          # Select or create workspace
          terraform workspace select ${{ matrix.environment }} 2>/dev/null || terraform workspace new ${{ matrix.environment }}
          
          # Determine action
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ACTION="${{ github.event.inputs.action }}"
          else
            ACTION="apply"
          fi
          
          # Execute action
          case $ACTION in
            "plan")
              terraform plan -var-file="environments/${{ matrix.environment }}/terraform.tfvars"
              ;;
            "apply")
              terraform apply -var-file="environments/${{ matrix.environment }}/terraform.tfvars" -auto-approve
              ;;
            "destroy")
              terraform destroy -var-file="environments/${{ matrix.environment }}/terraform.tfvars" -auto-approve
              ;;
          esac

      - name: Output deployment results
        if: steps.deploy.outcome == 'success'
        run: |
          cd movoz-infra
          echo "## ðŸš€ Deployment Results for ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Database Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Endpoint**: $(terraform output -raw db_endpoint)" >> $GITHUB_STEP_SUMMARY
          echo "- **Port**: $(terraform output -raw db_port)" >> $GITHUB_STEP_SUMMARY
          echo "- **Database Name**: $(terraform output -raw db_name)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Network Information" >> $GITHUB_STEP_SUMMARY
          echo "- **VPC ID**: $(terraform output -raw vpc_id)" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Group**: $(terraform output -raw security_group_id)" >> $GITHUB_STEP_SUMMARY
